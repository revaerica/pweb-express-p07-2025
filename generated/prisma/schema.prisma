// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../../node_modules/@prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  username   String?
  password   String
  email      String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  orders Order[]
}

model Genre {
  id         String    @id @default(uuid())
  name       String    @unique
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  books Book[]
}

model Book {
  id               String    @id @default(uuid())
  title            String    @unique
  writer           String
  publisher        String
  publication_year Int
  description      String?
  price            Int
  stock_quantity   Int
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt
  deleted_at       DateTime?

  genre_id String
  genre    Genre  @relation(fields: [genre_id], references: [id])

  order_items OrderItem[]
}

model Order {
  id         String   @id @default(uuid())
  user_id    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user  User        @relation(fields: [user_id], references: [id])
  items OrderItem[]
}

model OrderItem {
  id         String   @id @default(uuid())
  quantity   Int
  order_id   String
  book_id    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  order Order @relation(fields: [order_id], references: [id])
  book  Book  @relation(fields: [book_id], references: [id])
}
